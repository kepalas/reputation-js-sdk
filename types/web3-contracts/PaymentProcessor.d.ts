/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class PaymentProcessor extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    isMonethaAddress(arg0: string): TransactionObject<boolean>;

    orders(
      arg0: number | string
    ): TransactionObject<{
      state: string;
      price: string;
      fee: string;
      paymentAcceptor: string;
      originAddress: string;
      tokenAddress: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;

    unpause(): TransactionObject<void>;

    securePay(_orderId: number | string): TransactionObject<void>;

    setMerchantDealsHistory(_merchantHistory: string): TransactionObject<void>;

    destroy(): TransactionObject<void>;

    pause(): TransactionObject<void>;

    refundPayment(
      _orderId: number | string,
      _clientReputation: number | string,
      _merchantReputation: number | string,
      _dealHash: number | string,
      _refundReason: string
    ): TransactionObject<void>;

    secureTokenPay(_orderId: number | string): TransactionObject<void>;

    addOrder(
      _orderId: number | string,
      _price: number | string,
      _paymentAcceptor: string,
      _originAddress: string,
      _fee: number | string,
      _tokenAddress: string
    ): TransactionObject<void>;

    withdrawRefund(_orderId: number | string): TransactionObject<void>;

    processPayment(
      _orderId: number | string,
      _clientReputation: number | string,
      _merchantReputation: number | string,
      _dealHash: number | string
    ): TransactionObject<void>;

    cancelOrder(
      _orderId: number | string,
      _clientReputation: number | string,
      _merchantReputation: number | string,
      _dealHash: number | string,
      _cancelReason: string
    ): TransactionObject<void>;

    setMonethaGateway(_newGateway: string): TransactionObject<void>;

    setContactInformation(info: string): TransactionObject<void>;

    setMonethaAddress(
      _address: string,
      _isMonethaAddress: boolean
    ): TransactionObject<void>;

    setMerchantWallet(_newWallet: string): TransactionObject<void>;

    withdrawTokenRefund(_orderId: number | string): TransactionObject<void>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    destroyAndSend(_recipient: string): TransactionObject<void>;

    contactInformation(): TransactionObject<string>;
    merchantHistory(): TransactionObject<string>;
    paused(): TransactionObject<boolean>;
    monethaGateway(): TransactionObject<string>;
    owner(): TransactionObject<string>;
    merchantWallet(): TransactionObject<string>;
    FEE_PERMILLE(): TransactionObject<string>;
    merchantIdHash(): TransactionObject<string>;
  };
  events: {
    MonethaAddressSet(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Pause(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Unpause(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
