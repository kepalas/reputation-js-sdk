/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class PassportLogic extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    getTxDataBlockNumber(
      _factProvider: string,
      _key: string | number[]
    ): TransactionObject<{
      success: boolean;
      blockNumber: string;
      0: boolean;
      1: string;
    }>;

    isAllowedFactProvider(_address: string): TransactionObject<boolean>;

    getIPFSHash(
      _factProvider: string,
      _key: string | number[]
    ): TransactionObject<{
      success: boolean;
      value: string;
      0: boolean;
      1: string;
    }>;

    getPrivateDataHashes(
      _factProvider: string,
      _key: string | number[]
    ): TransactionObject<{
      success: boolean;
      dataIPFSHash: string;
      dataKeyHash: string;
      0: boolean;
      1: string;
      2: string;
    }>;

    getBytes(
      _factProvider: string,
      _key: string | number[]
    ): TransactionObject<{
      success: boolean;
      value: (string)[];
      0: boolean;
      1: (string)[];
    }>;

    privateDataExchanges(
      arg0: number | string
    ): TransactionObject<{
      dataRequester: string;
      dataRequesterValue: string;
      passportOwner: string;
      passportOwnerValue: string;
      factProvider: string;
      key: string;
      dataIPFSHash: string;
      dataKeyHash: string;
      encryptedExchangeKey: (string)[];
      exchangeKeyHash: string;
      encryptedDataKey: string;
      state: string;
      stateExpired: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: (string)[];
      9: string;
      10: string;
      11: string;
      12: string;
    }>;

    getUint(
      _factProvider: string,
      _key: string | number[]
    ): TransactionObject<{
      success: boolean;
      value: string;
      0: boolean;
      1: string;
    }>;

    getAddress(
      _factProvider: string,
      _key: string | number[]
    ): TransactionObject<{
      success: boolean;
      value: string;
      0: boolean;
      1: string;
    }>;

    isFactProviderInWhitelist(_address: string): TransactionObject<boolean>;

    getInt(
      _factProvider: string,
      _key: string | number[]
    ): TransactionObject<{
      success: boolean;
      value: string;
      0: boolean;
      1: string;
    }>;

    getBool(
      _factProvider: string,
      _key: string | number[]
    ): TransactionObject<{
      success: boolean;
      value: boolean;
      0: boolean;
      1: boolean;
    }>;

    getString(
      _factProvider: string,
      _key: string | number[]
    ): TransactionObject<{
      success: boolean;
      value: string;
      0: boolean;
      1: string;
    }>;

    finishPrivateDataExchange(
      _exchangeIdx: number | string
    ): TransactionObject<void>;

    timeoutPrivateDataExchange(
      _exchangeIdx: number | string
    ): TransactionObject<void>;

    deleteAddress(_key: string | number[]): TransactionObject<void>;

    deleteIPFSHash(_key: string | number[]): TransactionObject<void>;

    setWhitelistOnlyPermission(
      _onlyWhitelist: boolean
    ): TransactionObject<void>;

    deleteBool(_key: string | number[]): TransactionObject<void>;

    setBytes(
      _key: string | number[],
      _value: (string | number[])[]
    ): TransactionObject<void>;

    setInt(
      _key: string | number[],
      _value: number | string
    ): TransactionObject<void>;

    claimOwnership(): TransactionObject<void>;

    setTxDataBlockNumber(
      _key: string | number[],
      _data: (string | number[])[]
    ): TransactionObject<void>;

    deleteBytes(_key: string | number[]): TransactionObject<void>;

    deletePrivateDataHashes(_key: string | number[]): TransactionObject<void>;

    setIPFSHash(
      _key: string | number[],
      _value: string
    ): TransactionObject<void>;

    removeFactProviderFromWhitelist(_address: string): TransactionObject<void>;

    setString(_key: string | number[], _value: string): TransactionObject<void>;

    renounceOwnership(): TransactionObject<void>;

    acceptPrivateDataExchange(
      _exchangeIdx: number | string,
      _encryptedDataKey: string | number[]
    ): TransactionObject<void>;

    deleteInt(_key: string | number[]): TransactionObject<void>;

    deleteTxDataBlockNumber(_key: string | number[]): TransactionObject<void>;

    setBool(_key: string | number[], _value: boolean): TransactionObject<void>;

    addFactProviderToWhitelist(_address: string): TransactionObject<void>;

    setAddress(
      _key: string | number[],
      _value: string
    ): TransactionObject<void>;

    proposePrivateDataExchange(
      _factProvider: string,
      _key: string | number[],
      _encryptedExchangeKey: (string | number[])[],
      _exchangeKeyHash: string | number[]
    ): TransactionObject<void>;

    setUint(
      _key: string | number[],
      _value: number | string
    ): TransactionObject<void>;

    deleteUint(_key: string | number[]): TransactionObject<void>;

    setPrivateDataHashes(
      _key: string | number[],
      _dataIPFSHash: string,
      _dataKeyHash: string | number[]
    ): TransactionObject<void>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    deleteString(_key: string | number[]): TransactionObject<void>;

    disputePrivateDataExchange(
      _exchangeIdx: number | string,
      _exchangeKey: string | number[]
    ): TransactionObject<void>;

    privateDataExchangeAcceptTimeout(): TransactionObject<string>;
    isWhitelistOnlyPermissionSet(): TransactionObject<boolean>;
    getPrivateDataExchangesCount(): TransactionObject<string>;
    owner(): TransactionObject<string>;
    privateDataExchangeProposeTimeout(): TransactionObject<string>;
    openPrivateDataExchangesCount(): TransactionObject<string>;
    pendingOwner(): TransactionObject<string>;
  };
  events: {
    PrivateDataHashesUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    PrivateDataHashesDeleted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    PrivateDataExchangeProposed(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    PrivateDataExchangeAccepted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    PrivateDataExchangeClosed(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    PrivateDataExchangeDisputed(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    IPFSHashUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    IPFSHashDeleted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    TxDataUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    TxDataDeleted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    BytesUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    BytesDeleted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    StringUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    StringDeleted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    BoolUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    BoolDeleted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    IntUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    IntDeleted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    UintUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    UintDeleted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    AddressUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    AddressDeleted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    WhitelistOnlyPermissionSet(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    WhitelistFactProviderAdded(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    WhitelistFactProviderRemoved(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipRenounced(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
